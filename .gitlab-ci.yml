variables:
  NODE_IMAGE: $CI_REGISTRY_IMAGE/node-20:latest

stages:
  - install
  - build
  - check
  - release
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

default:
  image: $NODE_IMAGE

.node-modules-cache:
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - .pnpm-store
    policy: pull
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:npm_install[collapsed=true]\r\e[0KInstalling dependencies"
    - pnpm config set store-dir .pnpm-store
    - pnpm install --prefer-offline
    - echo -e "\e[0Ksection_end:`date +%s`:npm_install\r\e[0K"

install:
  stage: install
  extends:
    - .node-modules-cache
  cache:
    policy: pull-push
  script:
    - echo "This is a stub message"

build:app:
  stage: build
  extends:
    - .node-modules-cache
  script:
    - pnpm build
  artifacts:
    paths:
      - build

build:api:
  stage: build
  extends:
    - .node-modules-cache
  script:
    - pnpm build:api
  artifacts:
    paths:
      - src/shared/api/openapi

build:image:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  image: docker:20.10.16
  tags:
    - dind
  services:
    - docker:20.10.16-dind
  needs:
    - build:app
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest

lint:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  extends:
    - .node-modules-cache
  needs:
    - build:api
  script:
    - pnpm lint

release:
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  extends:
    - .node-modules-cache
  needs:
    - build:app
  variables:
    GIT_AUTHOR_NAME: $GITLAB_USER_NAME
    GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
    GIT_COMMITTER_NAME: $GITLAB_USER_NAME
    GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL
  script:
    - pnpm release

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  environment: production
  script:
    - curl $DEPLOY_HOOK
